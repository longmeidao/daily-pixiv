---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import type { PixivArtwork } from '../../types/pixiv';
import tsconfig from '../../../tsconfig.json';
import  SpeedInsights  from "@vercel/speed-insights/astro"

// 导出 getStaticPaths 函数
export async function getStaticPaths() {
  const pixivCollection = await getCollection('pixiv');
  const artworks: PixivArtwork[] = [];

  // 遍历所有作品目录并按创建日期排序
  for (const artworkDir of pixivCollection) {
    const artworkId = parseInt(artworkDir.id);
    const artworkData = artworkDir.data as unknown as PixivArtwork;
    if (artworkData && artworkData.id) {
      artworks.push({
        ...artworkData,
        id: artworkId
      });
    }
  }

  // 按创建日期排序
  artworks.sort((a, b) => 
    new Date(b.create_date).getTime() - new Date(a.create_date).getTime()
  );

  // 为每个作品生成一个路径，并传入排序后的作品列表
  return artworks.map((artwork, index) => ({
    params: { id: artwork.id.toString() },
    props: { artwork, sortedArtworks: artworks, currentIndex: index },
  }));
}

// 获取传入的 props
const { artwork, sortedArtworks, currentIndex } = Astro.props;

// 确保所有必要的属性都存在
const artworkData = artwork ? {
  id: artwork.id,
  title: artwork.title,
  images: artwork.images,
  page_count: artwork.page_count,
  tags: artwork.tags,
  author: {
    id: artwork.author.id,
    name: artwork.author.name
  }
} : null;

// 确保图片数组存在
const artworkImages = artworkData?.images || [];

// 计算导航状态
const hasPrev = currentIndex > 0;
const hasNext = currentIndex < sortedArtworks.length - 1;
const prevIndex = hasPrev ? currentIndex - 1 : null;
const nextIndex = hasNext ? currentIndex + 1 : null;

const pageTitle = artworkData ? `${tsconfig.site?.title} - ${artworkData.title}` : tsconfig.site?.title;
---

<Layout title={pageTitle}>
  {/* Logo */}
  <a href="/" class="site-logo">
    <Image 
      src="/se.png"
      alt="Site Logo"
      width={40}
      height={40}
      loading="eager"
      decoding="sync"
    />
  </a>

  <div id="artwork-container" data-artwork={JSON.stringify({
    id: artworkData?.id,
    images: artworkData?.images,
    page_count: artworkData?.page_count
  })}>
    {/* 作品切换按钮 */}
    <div class="artwork-nav-left">
      {hasPrev && prevIndex !== null && (
        <a class="artwork-nav-button" href={`/artwork/${sortedArtworks[prevIndex].id}`} aria-label="上一个作品">
          <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </a>
      )}
    </div>

    {/* 图片展示区域 */}
    <div id="artwork-viewer">
      <div id="artwork-box">
        <div id="artwork-frame">
          {artworkData ? (
            <div class="artwork-image-wrapper">
              {/* 显示第一张图片 */}
              <div id="main-image-container">
                <Image 
                  src={import(`../../content/images/pixiv/${artworkData.id}_1.jpg`)}
                  alt={artworkData.title}
                  width={800}
                  height={600}
                  id="artwork-image"
                  loading="eager"
                  decoding="sync"
                  data-index="1"
                />
              </div>
              {/* 预加载其他图片 */}
              <div id="preloaded-images" style="display: none; height: 0; overflow: hidden; position: absolute;">
                {artworkData.page_count > 1 && Array.from({ length: artworkData.page_count - 1 }).map((_, index) => {
                  const imageIndex = index + 2;
                  return (
                    <Image 
                      src={import(`../../content/images/pixiv/${artworkData.id}_${imageIndex}.jpg`)}
                      alt={`${artworkData.title} - ${imageIndex}`}
                      width={800}
                      height={600}
                      id={`artwork-image-${imageIndex}`}
                      loading="eager"
                      decoding="sync"
                      data-index={imageIndex}
                    />
                  );
                })}
              </div>
            </div>
          ) : (
            <div>
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <p>图片加载失败</p>
              <p>请稍后重试</p>
            </div>
          )}

          {/* 作品信息 */}
          <div id="artwork-info">
            <a href={`https://www.pixiv.net/artworks/${artworkData?.id}`} target="_blank" rel="noopener noreferrer">
              <h2>{artworkData?.title}</h2>
            </a>
            <div class="artwork-author">
              <a href={`https://www.pixiv.net/users/${artworkData?.author?.id}`} target="_blank" rel="noopener noreferrer">
                <span>{artworkData?.author?.name}</span>
              </a>
            </div>
            <div class="artwork-tags">
              {artworkData?.tags && artworkData.tags.length > 0 && (
                artworkData.tags.slice(0, 5).map((tag: string) => (
                  <a 
                    href={`https://www.pixiv.net/tags/${encodeURIComponent(tag)}`}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    #{tag}
                  </a>
                ))
              )}
              {artworkData?.tags && artworkData.tags.length > 5 && (
                <span>+{artworkData.tags.length - 5}</span>
              )}
            </div>
          </div>
        </div>
      </div>
      {/* 多图切换按钮 */}
      {artworkData?.page_count && artworkData?.page_count > 1 && artworkData?.images?.length > 1 && artworkData?.images?.length === artworkData?.page_count && (
        <div class="artwork-images-nav">
          <button id="prev-image" aria-label="上一张图片" disabled>
            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <span id="image-counter">1 / {artworkData?.images?.length}</span>
          <button id="next-image" aria-label="下一张图片">
            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      )}
    </div>

    {/* 作品切换按钮 */}
    <div class="artwork-nav-right">
      {hasNext && nextIndex !== null && (
        <a class="artwork-nav-button" href={`/artwork/${sortedArtworks[nextIndex].id}`} aria-label="下一个作品">
          <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      )}
    </div>
  </div>
</Layout>

<style>
  .artwork-nav-left,
  .artwork-nav-right {
    position: fixed;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    opacity: 0;
    transition: all 0.3s ease;
    pointer-events: auto;
  }
  
  .artwork-nav-left {
    left: 0;
    padding-left: 20px;
  }
  
  .artwork-nav-right {
    right: 0;
    padding-right: 20px;
  }
  
  .artwork-nav-button {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    color: white;
    text-decoration: none;
    transition: all 0.3s ease;
    pointer-events: auto;
  }
  
  .artwork-nav-button:hover {
    background: rgba(0, 0, 0, 0.7);
  }

  .artwork-nav-left.show {
    opacity: 1;
    background: linear-gradient(var(--direction, to right), rgba(0, 0, 0, 0.15), transparent);
  }

  .artwork-nav-right.show {
    opacity: 1;
    background: linear-gradient(var(--direction, to left), rgba(0, 0, 0, 0.15), transparent);
  }

  .artwork-nav-left.show .artwork-nav-button,
  .artwork-nav-right.show .artwork-nav-button {
    background: white;
    color: black;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .artwork-nav-left.show .artwork-nav-button:hover,
  .artwork-nav-right.show .artwork-nav-button:hover {
    background: #f5f5f5;
  }

  .site-logo {
    position: fixed;
    top: 20px;
    left: 20px;
    z-index: 20;
    display: block;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .site-logo:hover {
    transform: scale(1.1);
  }

  .site-logo img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .artwork-image-wrapper {
    width: 100%;
    height: 100%;
    border-radius: 8px;
    overflow: hidden;
  }

  #artwork-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  #preloaded-images {
    display: none !important;
    height: 0 !important;
    overflow: hidden !important;
    position: absolute !important;
    visibility: hidden !important;
    pointer-events: none !important;
  }
</style>

<script>
  let currentImageIndex = 0;
  const artwork = document.querySelector('#artwork-container') as HTMLDivElement;
  const artworkFrame = document.querySelector('#artwork-frame') as HTMLDivElement;
  const prevImageBtn = document.querySelector('#prev-image') as HTMLButtonElement;
  const nextImageBtn = document.querySelector('#next-image') as HTMLButtonElement;
  const imageCounter = document.querySelector('#image-counter');
  const artworkData = artwork ? JSON.parse(artwork.dataset.artwork || '{}') : {};
  const totalImages = artworkData.page_count || 1;

  // 存储所有图片的原始路径
  const imagePaths = new Map<number, string>();

  // 初始化图片路径
  function initImagePaths() {
    // 获取所有图片元素
    const allImages = document.querySelectorAll('img[data-index]') as NodeListOf<HTMLImageElement>;
    allImages.forEach(img => {
      const index = parseInt(img.dataset.index || '1');
      imagePaths.set(index, img.src);
    });
    console.log('初始化图片路径:', Object.fromEntries(imagePaths));
  }

  function updateImageButtons() {
    if (prevImageBtn && nextImageBtn && imageCounter) {
      prevImageBtn.disabled = currentImageIndex === 0;
      nextImageBtn.disabled = currentImageIndex === totalImages - 1;
      imageCounter.textContent = `${currentImageIndex + 1} / ${totalImages}`;
    }
  }

  async function updateImage() {
    if (artworkFrame && artworkData.id) {
      try {
        const imageIndex = currentImageIndex + 1;
        console.log('切换到图片索引:', imageIndex);

        // 获取主图片容器
        const mainContainer = document.querySelector('#main-image-container');
        if (!mainContainer) {
          throw new Error('无法找到主图片容器');
        }

        // 构建新的图片路径
        const newImagePath = `/src/content/images/pixiv/${artworkData.id}_${imageIndex}.jpg`;
        console.log('新图片路径:', newImagePath);

        // 创建新的图片元素
        const img = document.createElement('img');
        img.id = 'artwork-image';
        img.alt = artworkData.title || `图片 ${imageIndex}`;
        img.width = 800;
        img.height = 600;
        img.loading = 'eager';
        img.decoding = 'sync';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'contain';

        // 使用 Astro 的图片处理路径
        img.src = `/_image?href=${encodeURIComponent(newImagePath)}&w=800&h=600&f=webp`;
        
        // 清空并更新主图片容器
        mainContainer.innerHTML = '';
        mainContainer.appendChild(img);

        // 更新按钮状态
        updateImageButtons();
      } catch (error) {
        console.error('更新图片时出错:', error);
        // 发生错误时重置为第一张图片
        currentImageIndex = 0;
        updateImageButtons();
      }
    }
  }

  // 初始化图片路径
  initImagePaths();

  // 绑定按钮事件
  prevImageBtn?.addEventListener('click', () => {
    if (currentImageIndex > 0) {
      currentImageIndex--;
      updateImage();
    }
  });

  nextImageBtn?.addEventListener('click', () => {
    if (currentImageIndex < totalImages - 1) {
      currentImageIndex++;
      updateImage();
    }
  });

  // 初始化按钮状态
  updateImageButtons();

  // 添加键盘快捷键支持
  document.addEventListener('keydown', (e) => {
    // 获取导航链接
    const prevArtworkLink = document.querySelector('.artwork-nav-left a') as HTMLAnchorElement;
    const nextArtworkLink = document.querySelector('.artwork-nav-right a') as HTMLAnchorElement;

    if (e.key === 'ArrowLeft') {
      // 如果是多页作品且不在第一页，切换到上一页
      if (totalImages > 1 && currentImageIndex > 0) {
        prevImageBtn?.click();
      }
      // 如果是单页作品或在第一页，且存在上一个作品，跳转到上一个作品
      else if (prevArtworkLink) {
        prevArtworkLink.click();
      }
    } else if (e.key === 'ArrowRight') {
      // 如果是多页作品且不在最后一页，切换到下一页
      if (totalImages > 1 && currentImageIndex < totalImages - 1) {
        nextImageBtn?.click();
      }
      // 如果是单页作品或在最后一页，且存在下一个作品，跳转到下一个作品
      else if (nextArtworkLink) {
        nextArtworkLink.click();
      }
    }
  });

  // 添加边缘检测和导航按钮控制
  function setupEdgeDetection() {
    const navLeft = document.querySelector('.artwork-nav-left');
    const navRight = document.querySelector('.artwork-nav-right');
    
    document.addEventListener('mousemove', (e) => {
      const x = e.clientX;
      const windowWidth = window.innerWidth;
      
      if (x < 100) {
        navLeft?.classList.add('show');
      } else {
        navLeft?.classList.remove('show');
      }
      
      if (x > windowWidth - 100) {
        navRight?.classList.add('show');
      } else {
        navRight?.classList.remove('show');
      }
    });
  }

  // 初始化边缘检测
  setupEdgeDetection();
</script> 