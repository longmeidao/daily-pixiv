---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';
import type { PixivArtwork } from '../types/pixiv';
import tsconfig from '../../tsconfig.json';

// 获取所有作品并按创建日期排序
const pixivCollection = await getCollection('pixiv');
const artworks: PixivArtwork[] = [];

for (const artworkDir of pixivCollection) {
  const artworkId = parseInt(artworkDir.id);
  const artworkData = artworkDir.data as unknown as PixivArtwork;
  if (artworkData && artworkData.id) {
    artworks.push({
      ...artworkData,
      id: artworkId
    });
  }
}

// 按创建日期排序
artworks.sort((a, b) => 
  new Date(b.create_date).getTime() - new Date(a.create_date).getTime()
);

// 获取最新的作品
const latestArtwork = artworks[0];

// 计算导航状态
const hasNext = artworks.length > 1;
const nextIndex = hasNext ? 1 : null;

// 计算导航索引
const currentIndex = latestArtwork ? artworks.findIndex(a => a.id === latestArtwork.id) : -1;
const hasPrev = currentIndex > 0;
const prevIndex = hasPrev ? currentIndex - 1 : null;

// 确保所有必要的属性都存在
const artworkData = latestArtwork ? {
  id: latestArtwork.id,
  title: latestArtwork.title,
  create_date: latestArtwork.create_date,
  images: latestArtwork.images || [],
  page_count: latestArtwork.page_count,
  total_view: latestArtwork.total_view,
  total_bookmarks: latestArtwork.total_bookmarks,
  tags: latestArtwork.tags,
  author: {
    id: latestArtwork.author.id,
    name: latestArtwork.author.name,
    account: latestArtwork.author.account,
    profile_image_url: latestArtwork.author.profile_image_url
  }
} : null;

// 导入图片
let artworkImage;
try {
  if (artworkData?.images && artworkData.images.length > 0) {
    // @ts-ignore
    artworkImage = await import(/* @vite-ignore */ artworkData.images[0]);
  }
} catch (error) {
  console.error('Error importing images:', error);
}

// 导出 getStaticPaths 函数
export async function getStaticPaths() {
  const pixivCollection = await getCollection('pixiv');
  const artworks: PixivArtwork[] = [];

  // 遍历所有作品目录
  for (const artworkDir of pixivCollection) {
    const artworkId = parseInt(artworkDir.id);
    const artworkData = artworkDir.data as unknown as PixivArtwork;
    if (artworkData && artworkData.id) {
      artworks.push({
        ...artworkData,
        id: artworkId
      });
    }
  }

  // 按创建日期排序
  const sortedArtworks = artworks.sort((a, b) => 
    new Date(b.create_date).getTime() - new Date(a.create_date).getTime()
  );

  // 生成所有可能的路径
  const paths = [];
  for (let i = 0; i < sortedArtworks.length; i++) {
    paths.push({
      params: { index: i.toString() },
      props: { artwork: sortedArtworks[i] },
    });
  }

  // 添加默认路径（不带 index 参数）
  paths.push({
    params: {},
    props: { artwork: sortedArtworks[0] },
  });

  return paths;
}

// 获取传入的 props
const { artwork } = Astro.props;

const siteTitle = tsconfig.site?.title || 'Daily Pixiv';
---

<Layout title={siteTitle}>
  {/* Logo */}
  <a href="/" class="site-logo">
    <Image 
      src=/se.png
      alt="Site Logo"
      width={40}
      height={40}
      loading="eager"
      decoding="sync"
      fetchpriority="high"
    />
  </a>

  {!artworkData ? (
    <div>
      <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
      <h3>暂无作品</h3>
      <p>请先运行 GitHub Action 获取作品。获取后将自动显示在这里。</p>
    </div>
  ) : (
    <div id="artwork-container" data-artwork={JSON.stringify({
      id: artworkData.id,
      images: artworkData.images,
      page_count: artworkData.page_count
    })}>
      {/* 作品切换按钮 */}
          <div class="artwork-nav-left">
                {hasPrev && prevIndex !== null && (
            <a class="artwork-nav-button" href={`/artwork/${artworks[prevIndex].id}`} aria-label="上一个作品">
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
            </a>
          )}
          </div>
      {/* 图片展示区域 */}
      <div id="artwork-viewer">


          {/* 多图切换按钮 */}
          {artworkData.page_count > 1 && artworkData.images?.length > 1 && artworkData.images?.length === artworkData.page_count && (
            <div>
              <button id="prev-image" aria-label="上一张图片" disabled>
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <span id="image-counter">1 / {artworkData.images.length}</span>
              <button id="next-image" aria-label="下一张图片">
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          )}
          <div id="artwork-box">
            <div id="artwork-frame">
        {artworkData.images.length > 0 ? (
          <Image 
            id="artwork-image"
            src={artworkData.images[currentIndex]} 
            alt={artworkData.title}
            width={800}
            height={600}
            format="webp"
            quality={90}
            loading="eager"
            decoding="sync"
            fetchpriority="high"
            priority
          />
        ) : (
          <div>
            <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <p>图片加载失败</p>
            <p>请稍后重试</p>
          </div>
        )}
              {/* 作品信息 */}
      <div id="artwork-info">
        <a href={`https://www.pixiv.net/artworks/${artworkData.id}`} target="_blank" rel="noopener noreferrer">
          <h2>
            {artworkData.title}
          </h2>
        </a>
        <div class="artwork-author">
          <a href={`https://www.pixiv.net/users/${artworkData.author.id}`} target="_blank" rel="noopener noreferrer">
            <!-- {authorImage && (
              <Image 
                src={authorImage.default}
                alt={artworkData.author.name}
                width={40}
                height={40}
                format="webp"
                loading="eager"
                decoding="sync"
                fetchpriority="high"
                priority
              />
            )} -->
            <span>{artworkData.author.name}</span>
          </a>
          <!-- <span>·</span>
          <div>
            <span title="浏览数">
              <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
              </svg>
              {artworkData.total_view.toLocaleString()}
            </span>
            <span title="收藏数">
              <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
              {artworkData.total_bookmarks.toLocaleString()}
            </span>
          </div> -->
        </div>
        <div class="artwork-tags">
          {artworkData.tags.slice(0, 5).map((tag: string) => (
            <a 
              href={`https://www.pixiv.net/tags/${encodeURIComponent(tag)}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              #{tag}
            </a>
          ))}
          {artworkData.tags.length > 5 && (
            <span>+{artworkData.tags.length - 5}</span>
          )}
        </div>
      </div>
        </div>
      </div>

      </div>
          {/* 作品切换按钮 */}
          <div class="artwork-nav-right">
            {hasNext && nextIndex !== null && (
            <a class="artwork-nav-button" href={`/artwork/${artworks[nextIndex].id}`} aria-label="下一个作品">
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </a>
          )}
          </div>

    </div>
  )}

<style>
  .artwork-nav-left,
  .artwork-nav-right {
    position: fixed;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    opacity: 0;
    transition: all 0.3s ease;
    pointer-events: auto;
  }
  
  .artwork-nav-left {
    left: 0;
    padding-left: 20px;
  }
  
  .artwork-nav-right {
    right: 0;
    padding-right: 20px;
  }
  
  .artwork-nav-button {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    color: white;
    text-decoration: none;
    transition: all 0.3s ease;
    pointer-events: auto;
  }
  
  .artwork-nav-button:hover {
    background: rgba(0, 0, 0, 0.7);
  }

  .artwork-nav-left.show {
    opacity: 1;
    background: linear-gradient(var(--direction, to right), rgba(0, 0, 0, 0.15), transparent);
  }
  .artwork-nav-right.show {
    opacity: 1;
    background: linear-gradient(var(--direction, to left), rgba(0, 0, 0, 0.15), transparent);

  }

  .artwork-nav-left.show .artwork-nav-button,
  .artwork-nav-right.show .artwork-nav-button {
    background: white;
    color: black;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .artwork-nav-left.show .artwork-nav-button:hover,
  .artwork-nav-right.show .artwork-nav-button:hover {
    background: #f5f5f5;
  }

  .site-logo {
    position: fixed;
    top: 20px;
    left: 20px;
    z-index: 20;
    display: block;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .site-logo:hover {
    transform: scale(1.1);
  }

  .site-logo img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
</style>

<script>
  let currentImageIndex = 0;
  const artwork = document.querySelector('#artwork-container') as HTMLDivElement;
  const artworkImage = document.querySelector('#artwork-image') as HTMLImageElement;
  const prevImageBtn = document.querySelector('#prev-image') as HTMLButtonElement;
  const nextImageBtn = document.querySelector('#next-image') as HTMLButtonElement;
  const imageCounter = document.querySelector('#image-counter');
  const artworkData = artwork ? JSON.parse(artwork.dataset.artwork || '{}') : {};
  const totalImages = artworkData.images?.length || 1;

  // 添加鼠标跟随光效
  if (artwork) {
    artwork.addEventListener('mousemove', (e) => {
      const rect = artwork.getBoundingClientRect();
      const x = ((e.clientX - rect.left) / rect.width) * 100;
      const y = ((e.clientY - rect.top) / rect.height) * 100;
      artwork.style.setProperty('--mouse-x', `${x}%`);
      artwork.style.setProperty('--mouse-y', `${y}%`);
    });
  }

  function updateImageButtons() {
    if (prevImageBtn && nextImageBtn && imageCounter) {
      prevImageBtn.disabled = currentImageIndex === 0;
      nextImageBtn.disabled = currentImageIndex === totalImages - 1;
      imageCounter.textContent = `${currentImageIndex + 1} / ${totalImages}`;
    }
  }

  function updateImage() {
    if (artworkImage && artworkData.images) {
      artworkImage.src = artworkData.images[currentImageIndex];
    }
  }

  // 绑定按钮事件
  prevImageBtn?.addEventListener('click', () => {
    if (currentImageIndex > 0) {
      currentImageIndex--;
      updateImage();
      updateImageButtons();
    }
  });

  nextImageBtn?.addEventListener('click', () => {
    if (currentImageIndex < totalImages - 1) {
      currentImageIndex++;
      updateImage();
      updateImageButtons();
    }
  });

  // 初始化按钮状态
  updateImageButtons();

  // 添加键盘快捷键支持
  document.addEventListener('keydown', (e) => {
    // 获取下一个作品的链接
    const nextArtworkLink = document.querySelector('.artwork-nav-right a') as HTMLAnchorElement;

    if (e.key === 'ArrowLeft') {
      // 如果是多页作品且不在第一页，切换到上一页
      if (totalImages > 1 && currentImageIndex > 0) {
        prevImageBtn?.click();
      }
    } else if (e.key === 'ArrowRight') {
      // 如果是多页作品且不在最后一页，切换到下一页
      if (totalImages > 1 && currentImageIndex < totalImages - 1) {
        nextImageBtn?.click();
      } 
      // 如果是单页作品或在最后一页，且存在下一个作品，跳转到下一个作品
      else if (nextArtworkLink) {
        nextArtworkLink.click();
      }
    }
  });

  // 添加边缘检测和导航按钮控制
  function setupEdgeDetection() {
    const navLeft = document.querySelector('.artwork-nav-left');
    const navRight = document.querySelector('.artwork-nav-right');
    
    document.addEventListener('mousemove', (e) => {
      const x = e.clientX;
      const windowWidth = window.innerWidth;
      
      if (x < 100) {
        navLeft?.classList.add('show');
      } else {
        navLeft?.classList.remove('show');
      }
      
      if (x > windowWidth - 100) {
        navRight?.classList.add('show');
      } else {
        navRight?.classList.remove('show');
      }
    });
  }

  // 初始化边缘检测
  setupEdgeDetection();
</script> 

</Layout>