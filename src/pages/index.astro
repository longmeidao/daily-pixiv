---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';
import type { PixivArtwork } from '../types/pixiv';

// 获取所有作品
const pixivCollection = await getCollection('pixiv');
const artworks: PixivArtwork[] = [];

// 遍历所有作品目录
for (const artworkDir of pixivCollection) {
  const artworkId = parseInt(artworkDir.id);
  const artworkData = artworkDir.data as unknown as PixivArtwork;
  if (artworkData && artworkData.id) {  // 确保 artworkData 和 id 都存在
    artworks.push({
      ...artworkData,
      id: artworkId
    });
  }
}

// 按创建日期排序
const sortedArtworks: PixivArtwork[] = artworks.sort((a, b) => 
  new Date(b.create_date).getTime() - new Date(a.create_date).getTime()
);

// 获取最新的作品
const latestArtwork = sortedArtworks[0];
const currentArtwork = latestArtwork ? {
  id: latestArtwork.id,
  title: latestArtwork.title,
  create_date: latestArtwork.create_date,
  images: latestArtwork.images,
  page_count: latestArtwork.page_count,
  total_view: latestArtwork.total_view,
  total_bookmarks: latestArtwork.total_bookmarks,
  tags: latestArtwork.tags,
  author: {
    id: latestArtwork.author.id,
    name: latestArtwork.author.name,
    account: latestArtwork.author.account,
    profile_image_url: latestArtwork.author.profile_image_url
  }
} : null;

// 计算导航索引
const currentIndex = currentArtwork ? sortedArtworks.findIndex(a => a.id === currentArtwork.id) : -1;
const hasPrev = currentIndex > 0;
const hasNext = currentIndex < sortedArtworks.length - 1;
const prevIndex = hasPrev ? currentIndex - 1 : null;
const nextIndex = hasNext ? currentIndex + 1 : null;

// 确保图片数组存在
const artworkImages = currentArtwork?.images || [];
const firstImage = artworkImages[0] || '';

// 导入图片
let artworkImage;
let authorImage;
try {
  if (firstImage) {
    // 从完整路径中提取文件名
    const imageFileName = `${currentArtwork?.id}_1.jpg`;
    if (imageFileName) {
      artworkImage = await import(`../content/images/pixiv/${imageFileName}`);
    }
  }
  if (currentArtwork?.author.profile_image_url) {
    // 从完整路径中提取文件名
    const profileImageFileName = `author_${currentArtwork.author.id}.jpg`;
    if (profileImageFileName) {
      authorImage = await import(`../content/images/pixiv/${profileImageFileName}`);
    }
  }
} catch (error) {
  console.error('Error importing images:', error);
}

// 确保所有必要的属性都存在
const artworkData = currentArtwork ? {
  id: currentArtwork.id,
  title: currentArtwork.title,
  create_date: currentArtwork.create_date,
  images: currentArtwork.images || [],
  page_count: currentArtwork.page_count,
  total_view: currentArtwork.total_view,
  total_bookmarks: currentArtwork.total_bookmarks,
  tags: currentArtwork.tags,
  author: {
    id: currentArtwork.author.id,
    name: currentArtwork.author.name,
    account: currentArtwork.author.account,
    profile_image_url: currentArtwork.author.profile_image_url
  }
} : null;

// 导出 getStaticPaths 函数
export async function getStaticPaths() {
  const pixivCollection = await getCollection('pixiv');
  const artworks: PixivArtwork[] = [];

  // 遍历所有作品目录
  for (const artworkDir of pixivCollection) {
    const artworkId = parseInt(artworkDir.id);
    const artworkData = artworkDir.data as unknown as PixivArtwork;
    if (artworkData && artworkData.id) {
      artworks.push({
        ...artworkData,
        id: artworkId
      });
    }
  }

  // 按创建日期排序
  const sortedArtworks = artworks.sort((a, b) => 
    new Date(b.create_date).getTime() - new Date(a.create_date).getTime()
  );

  // 生成所有可能的路径
  const paths = [];
  for (let i = 0; i < sortedArtworks.length; i++) {
    paths.push({
      params: { index: i.toString() },
      props: { artwork: sortedArtworks[i] },
    });
  }

  // 添加默认路径（不带 index 参数）
  paths.push({
    params: {},
    props: { artwork: sortedArtworks[0] },
  });

  return paths;
}

// 获取传入的 props
const { artwork } = Astro.props;
---

{!artworkData ? (
  <Layout title="Pixiv Artwork">
    <div class="min-h-screen bg-black">
      <div class="flex items-center justify-center min-h-screen">
        <div class="text-center">
          <svg class="mx-auto h-12 w-12 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <h3 class="mt-4 text-lg font-medium text-gray-100">暂无作品</h3>
          <p class="mt-2 text-gray-400">
            请先运行 GitHub Action 获取作品。获取后将自动显示在这里。
          </p>
        </div>
      </div>
    </div>
  </Layout>
) : (
  <Layout title={artworkData.title}>
    <div class="min-h-screen bg-black">
      {sortedArtworks.length === 0 ? (
        <div class="flex items-center justify-center min-h-screen">
          <div class="text-center">
            <svg class="mx-auto h-12 w-12 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <h3 class="mt-4 text-lg font-medium text-gray-100">暂无作品</h3>
            <p class="mt-2 text-gray-400">
              请先运行 GitHub Action 获取作品。获取后将自动显示在这里。
            </p>
          </div>
        </div>
      ) : (
        <div 
          class="relative min-h-screen" 
          id="artwork-container"
          data-artwork={JSON.stringify({
            id: artworkData.id,
            images: artworkData.images,
            page_count: artworkData.page_count
          })}
        >
          {/* 图片展示区域 */}
          <div class="flex items-center justify-center min-h-screen" id="artwork-viewer">
            <div class="relative w-full h-full flex items-center justify-center">
              {/* 导航按钮 */}
              <div class="fixed inset-0 flex items-center justify-between pointer-events-none z-20">
                {/* 作品切换按钮 */}
                <div class="flex items-center">
                  {hasPrev && prevIndex !== null && (
                    <a 
                      href={`/artwork/${sortedArtworks[prevIndex].id}`}
                      class="pointer-events-auto p-4 text-white/60 hover:text-white transition-colors"
                      aria-label="上一个作品"
                    >
                      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                      </svg>
                    </a>
                  )}
                  {!hasPrev && <div class="w-16" />}
                </div>

                {/* 多图切换按钮 */}
                <div class="absolute left-1/2 transform -translate-x-1/2 bottom-32 flex items-center gap-2 pointer-events-auto">
                  {artworkData.page_count > 1 && artworkData.images?.length > 1 && artworkData.images?.length === artworkData.page_count && (
                    <div class="bg-black/40 rounded-full p-1 flex items-center gap-1">
                      <button
                        id="prev-image"
                        class="p-2 text-white/60 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors"
                        aria-label="上一张图片"
                        disabled
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                      </button>
                      <span id="image-counter" class="text-white/60 text-sm px-2">1 / {artworkData.images.length}</span>
                      <button
                        id="next-image"
                        class="p-2 text-white/60 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors"
                        aria-label="下一张图片"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                      </button>
                    </div>
                  )}
                </div>

                {/* 作品切换按钮 */}
                <div class="flex items-center">
                  {hasNext && nextIndex !== null && (
                    <a 
                      href={`/artwork/${sortedArtworks[nextIndex].id}`}
                      class="pointer-events-auto p-4 text-white/60 hover:text-white transition-colors"
                      aria-label="下一个作品"
                    >
                      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  )}
                  {!hasNext && <div class="w-16" />}
                </div>
              </div>

              {artworkImage ? (
                <Image 
                  id="artwork-image"
                  src={artworkImage.default} 
                  alt={artworkData.title}
                  class="max-h-[90vh] max-w-[90vw] object-contain"
                  width={800}
                  height={600}
                  format="webp"
                  quality={90}
                />
              ) : (
                <div class="flex flex-col items-center justify-center text-white/60">
                  <svg class="w-16 h-16 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <p class="text-lg">图片加载失败</p>
                  <p class="text-sm mt-2">请稍后重试</p>
                </div>
              )}
            </div>
          </div>

          {/* 作品信息 */}
          <div id="artwork-info" class="artwork-info relative text-white/80 transition-all duration-300 z-30">
            <div class="max-w-4xl mx-auto px-4 py-6 relative">
              <div class="bg-black/40 backdrop-blur-sm rounded-lg p-4">
                {/* 标题和作者信息 */}
                <div class="flex items-start justify-between gap-8">
                  <div class="flex-1 min-w-0">
                    <a 
                      href={`https://www.pixiv.net/artworks/${artworkData.id}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="inline-block group"
                    >
                      <h2 class="text-xl font-medium line-clamp-1 cursor-pointer hover:text-white transition-colors">
                        {artworkData.title}
                        <span class="ml-2 text-sm text-white/40 group-hover:text-white/60 transition-colors">
                          {new Date(artworkData.create_date).toLocaleDateString()}
                        </span>
                      </h2>
                    </a>
                    <div class="flex items-center mt-2 text-sm">
                      <a 
                        href={`https://www.pixiv.net/users/${artworkData.author.id}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="flex items-center hover:text-white transition-colors"
                      >
                        {authorImage && (
                          <Image 
                            src={authorImage.default}
                            alt={artworkData.author.name}
                            class="h-5 w-5 rounded-full bg-gray-800"
                            width={40}
                            height={40}
                            format="webp"
                          />
                        )}
                        <span class="ml-2">
                          {artworkData.author.name}
                        </span>
                      </a>
                      <span class="mx-2 opacity-30">·</span>
                      <div class="flex items-center space-x-3 text-sm opacity-60">
                        <span class="flex items-center" title="浏览数">
                          <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                          </svg>
                          {artworkData.total_view.toLocaleString()}
                        </span>
                        <span class="flex items-center" title="收藏数">
                          <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                          </svg>
                          {artworkData.total_bookmarks.toLocaleString()}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 标签 */}
                <div class="flex flex-wrap gap-2 mt-3">
                  {artworkData.tags.slice(0, 5).map((tag: string) => (
                    <a 
                      href={`https://www.pixiv.net/tags/${encodeURIComponent(tag)}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="px-2.5 py-0.5 bg-white/5 hover:bg-white/10 rounded-full text-xs cursor-pointer transition-colors"
                    >
                      #{tag}
                    </a>
                  ))}
                  {artworkData.tags.length > 5 && (
                    <span class="px-2.5 py-0.5 bg-white/5 rounded-full text-xs text-white/40">
                      +{artworkData.tags.length - 5}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  </Layout>
)}

<style>
  .artwork-info {
    left: 0;
    right: 0;
  }
  .artwork-info.fixed {
    position: fixed;
    bottom: 0;
    background: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(4px);
  }
  .artwork-info.relative {
    position: relative;
    margin-top: -80px;
    background: linear-gradient(to bottom, transparent, rgba(0, 0, 0, 0.6) 50%);
  }
  
  .artwork-info.fixed::before {
    display: none;
  }
</style>

<script>
  let currentImageIndex = 0;
  const artwork = document.querySelector('#artwork-container') as HTMLDivElement;
  const artworkImage = document.querySelector('#artwork-image') as HTMLImageElement;
  const prevImageBtn = document.querySelector('#prev-image') as HTMLButtonElement;
  const nextImageBtn = document.querySelector('#next-image') as HTMLButtonElement;
  const imageCounter = document.querySelector('#image-counter');
  const artworkData = artwork ? JSON.parse(artwork.dataset.artwork || '{}') : {};
  const totalImages = artworkData.images?.length || 1;

  function updateImageButtons() {
    if (prevImageBtn && nextImageBtn && imageCounter) {
      prevImageBtn.disabled = currentImageIndex === 0;
      nextImageBtn.disabled = currentImageIndex === totalImages - 1;
      imageCounter.textContent = `${currentImageIndex + 1} / ${totalImages}`;
    }
  }

  function updateImage() {
    if (artworkImage && artworkData.images) {
      artworkImage.src = artworkData.images[currentImageIndex];
    }
  }

  // 绑定按钮事件
  prevImageBtn?.addEventListener('click', () => {
    if (currentImageIndex > 0) {
      currentImageIndex--;
      updateImage();
      updateImageButtons();
    }
  });

  nextImageBtn?.addEventListener('click', () => {
    if (currentImageIndex < totalImages - 1) {
      currentImageIndex++;
      updateImage();
      updateImageButtons();
    }
  });

  // 初始化按钮状态
  updateImageButtons();

  function updateArtworkInfoPosition() {
    const artworkViewer = document.getElementById('artwork-viewer');
    const artworkInfo = document.getElementById('artwork-info');
    
    if (!artworkViewer || !artworkInfo) return;

    const viewerRect = artworkViewer.getBoundingClientRect();
    const windowHeight = window.innerHeight;
    
    // 检查图片查看器是否在视口中，并且底部是否在视口内
    const isInView = viewerRect.bottom > 0 && viewerRect.top < windowHeight;
    const isBottomVisible = viewerRect.bottom > windowHeight;

    if (isInView && isBottomVisible) {
      artworkInfo.classList.add('fixed');
      artworkInfo.classList.remove('relative');
    } else {
      artworkInfo.classList.remove('fixed');
      artworkInfo.classList.add('relative');
    }
  }

  // 初始化时运行一次
  updateArtworkInfoPosition();

  // 监听滚动事件，使用 requestAnimationFrame 优化性能
  let ticking = false;
  window.addEventListener('scroll', () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        updateArtworkInfoPosition();
        ticking = false;
      });
      ticking = true;
    }
  });

  // 监听窗口大小变化
  window.addEventListener('resize', updateArtworkInfoPosition);

  // 添加键盘快捷键支持
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft' && !prevImageBtn?.disabled) {
      prevImageBtn?.click();
    } else if (e.key === 'ArrowRight' && !nextImageBtn?.disabled) {
      nextImageBtn?.click();
    }
  });

  // 主题切换按钮
  const themeToggle = document.getElementById('theme-toggle');
  themeToggle?.addEventListener('click', () => {
    const isDark = document.documentElement.classList.contains('dark');
    if (isDark) {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    } else {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    }
  });
</script> 